/*************************************/
//level 1

Interactive Rebase

// alter commits in the same branch:
git rebase -i HEAD~3 // interactive rebase going back 3 levels 

// reorder commits 
git log --oneline

$ git rebase -i head~3
Successfully rebased and updated refs/heads/admin.

david@DESKTOP-U1APQB8 MINGW32 /d/Projects/codeSchool/GIT/store (admin)
$ git status
On branch admin
Your branch is ahead of 'origin/admin' by 2 commits.
  (use "git push" to publish your local commits)
nothing to commit, working directory clean

david@DESKTOP-U1APQB8 MINGW32 /d/Projects/codeSchool/GIT/store (admin)
$ git log --oneline
c012e11 end of the GIT 1 course
5b67fde ..
0396949 .
11be2a5 create cat txt file
0f3ca01 .
113f042 amend commit...
f08d3f5 add license and readme mod
cfd4b15 Initial commit


// How to change commit messages

david@DESKTOP-U1APQB8 MINGW32 /d/Projects/codeSchool/GIT/store (admin)
$ git rebase -i head~3
[detached HEAD 1e42634] changing commit message using rebase interactive reword!!
 Date: Mon Oct 24 13:50:11 2016 -1000
 1 file changed, 8 insertions(+)
 create mode 100644 git-real-2-notes.txt
Successfully rebased and updated refs/heads/admin.

david@DESKTOP-U1APQB8 MINGW32 /d/Projects/codeSchool/GIT/store (admin)
$ git log --oneline
99a502e commit before rebasing 2
3fe023c end of the GIT 1 course
1e42634 changing commit message using rebase interactive reword!!
0396949 .
11be2a5 create cat txt file
0f3ca01 .
113f042 amend commit...
f08d3f5 add license and readme mod
cfd4b15 Initial commit


// how to split commits 

david@DESKTOP-U1APQB8 MINGW32 /d/Projects/codeSchool/GIT/store (admin)
$ git status
On branch admin
Your branch is ahead of 'origin/admin' by 3 commits.
  (use "git push" to publish your local commits)
nothing to commit, working directory clean

david@DESKTOP-U1APQB8 MINGW32 /d/Projects/codeSchool/GIT/store (admin)
$ clear

david@DESKTOP-U1APQB8 MINGW32 /d/Projects/codeSchool/GIT/store (admin)
$ git rebase -i head~3
Stopped at 3fe023ca231d5808267727110f7e04a16569acd5... end of the GIT 1 course
You can amend the commit now, with

        git commit --amend

Once you are satisfied with your changes, run

        git rebase --continue


david@DESKTOP-U1APQB8 MINGW32 /d/Projects/codeSchool/GIT/store (admin|REBASE-i 2/3)
$ git reset head^
Unstaged changes after reset:
M       notes.txt

david@DESKTOP-U1APQB8 MINGW32 /d/Projects/codeSchool/GIT/store (admin|REBASE-i 2/3)
$ git status
interactive rebase in progress; onto 0396949
Last commands done (2 commands done):
   pick 1e42634 changing commit message using rebase interactive reword!!
   edit 3fe023c end of the GIT 1 course
Next command to do (1 remaining command):
   pick 99a502e commit before rebasing 2
  (use "git rebase --edit-todo" to view and edit)
You are currently splitting a commit while rebasing branch 'admin' on '0396949'.
  (Once your working directory is clean, run "git rebase --continue")


david@DESKTOP-U1APQB8 MINGW32 /d/Projects/codeSchool/GIT/store (admin|REBASE-i 2/3)
$ git rebase --continue
Successfully rebased and updated refs/heads/admin.

david@DESKTOP-U1APQB8 MINGW32 /d/Projects/codeSchool/GIT/store (admin)
$ git log --oneline
a88468c commit before rebasing 2
fb9b2a3 edited commit message!
1e42634 changing commit message using rebase interactive reword!!
0396949 .
11be2a5 create cat txt file
0f3ca01 .
113f042 amend commit...
f08d3f5 add license and readme mod
cfd4b15 Initial commit


// Squash commits (several back to 1)
git rebase -i HEAD~4


/**************************************************************/
// Level 2: Stashing 

Scenario: You're in the middle of committing a branch with a new web page. 
Boss calls and wants a master branch deployed immediately. Since you're in the 
middle of a new branch.... what to do? Stashing.

git stash save // saves files away from last commit 

git checkout master 
git pull 
// make revisions and push after

Now, ready to pick up where we left off with our new branch:
git checkout <newBranch>

git stash apply // restores changes to branch

git stash list //lists all stashes
stash@1
stash@2
stash@3

git stash apply stash@1

// afterwards the stash doesn't pop/delete itself, so run:
git stash drop 

git stash     = git stash save
git stash apply = git stash apply stash@{0}
git stash drop  = git stash drop stash@{0}
git stash pop   = git stash apply and git stash drop (at the same time)

// Keep Index
git stash save --keep-index 

git status 
git commit -m "adding single new file, not everything"

git stash pop 


// Stash including untracked files along w/ tracked ones
git stash save --include-untracked 
git status
git stash pop 

// stash list options
git stash list 
git stash list --stat 

//stash show
git stash show stash@{0}

git stash show --patch //shows file diffs 

// leave message on the stash
git stash save "Add eew page"
git stash list // shows new message left above 

// accidentally deleted the branch where your stash is pointing to?
git stash branch <branchName> stash@{0} // creates branch and copies stash contents into the branch 

git commit -am "commit stash replinished branch"

// blow away the entire list of stashes?
git stash clear 


/*********************************************************/

// Level 3: purging history

step one: back up entire repo

git clone mySite mySite-Backup

// to rewrite history use:
git filter-branch --tree-filter <shell command> // specify a shell command as last options

git will check each commit out into a working directory, run your <command>, and recommit the code. 

ie: 
git filter-branch --tree-filter 'rm -f passwords.txt'

or remove large mp4 files:

git filter-branch --tree-filter 'find . -name "*.mp4" -exec rm {} \;'

// run so goes through all branches
git filter-branch --tree-filter 'rm -f passwords.txt' -- --all

// run on only current branch 
git filter-branch --tree-filter 'rm -f passwords.txt' -- --HEAD 

** the `-f` switch is to make sure the filter command doesn't fail if the passwords.txt file isn't found 

** This whole process takes much time, so a quicker way to do this is via the 
// Index Filter 
// Only works on the staging area
git filter-branch --index-filter 'git rm --cached --ignore-unmatch passwords.txt'

** --ignore-unmatch is to ensure the command doesn't fail if the file doesn't exist 

// If you run again it would fail because git keeps a backup. Use the -f switch 
Run: git filter-branch -f --tree-filter 'rm -f passwords.txt' -- --all 

//Prune empty commits after
git filter-branch -f --prune-empty -- --all 


/***************************************************************************/
Level 4: Working together

Line endings between linux / windows / mac
\r\n 

git config --global core.autocrlf true 

//linux 
git config --global core.autocrlf input 


.gitattributes file 
//create this file in your project root 

file types        |       conversion settings
---------------------------------------------
*                     text=auto
*.html                text 
*.css                 text 
*.bat                 text eol=crlf
*.sh                  text eol = lf
*.jpg                 binary 


// Cherry Picking 
To take a commit from a second branch and `pick` it out and add to production/master branch. 

git log --oneline gives the shortened id for the commit

git checkout production 

git cherry-pick 5321e3 

git log --oneline (on prod branch)
//will see the cherry picked commit added to production 

// to edit the commit message...
git cherry-pick --edit 5321

// cherry pick multiple commits from dev into prod 
git cherry-pick --no-commit 5321e2 8584a9 

//then commit as normal once in prod branch 
git commit -m "added 2 new commits from dev to prod"

// to add sourch SHA to commit message when cherry picking 
git cherry-pick -x 5321a3 // -x option 

// this is only useful for public branches. Local branch id's can't be seen anyway.

// To keep track of who did the cherry picking, use:
git cherry-pick --signoff 5321a8 // --signoff option 

git log // now it will show the cherry picker in the author/email data for the commit  


/**********************************************************************/

Level 5: Submodules 

Submodules are git repos inside another git repo!
Used to share libraries across multiple projects 

Submodules can live on github and can be accessed by:
git submodule add git@example.com:css.git 

Running: git status
afterwards will show that a new file, .gitmodules was created 

Then: 
git commit -m "added submodule for css" 
git push 

How to add the submodule to project:
cd css 
git checkout master 

git status 
git commit -am "add css module to project"
git push 

How to initialize submodules when pulling down new project w/ Submodules included:
git clone site@github.com:whatever 

// css and js directories are empty but .gitmodules file does exist 

git submodule init 

Git goes through the .gitmodules file and addds an entry to config for each submodule.
.git/config 

Then run:
git submodule update 

This goes out to internet and pulls down the submodule directories into our project 

// Pull Submodules 

git pull 

If a new pull indicates the submodule has been updated (git diff) run:
git submodule update 
again to pull down the updates 

Afterwards the update submodule(s) will not be associated with ANY branch. 
git branch 
//shows we're on *no branch

To remedy:
git checkout master 

git merge b6bb883
which is merging the sha for the specific commit 

git push 

cd /
git status (new commits)
git commit -am "committing new submodules finally!)

In other words, submodules have to be pushed twice.

In case you may forget to do this, run:
git push --recurse-submodules=check 

To push all repos with submodules 
git push --recurse-submodules=on-demand

// Make a shortcut alias!
git config alias.pushall "push --recurse-submodules=on-demand"

git pushall 


/*********************************************************/
Level 6: Reflog

If one rolls back to a prior commit, ones after will disappear / delete.
Actually they're not deleted. They are available via:
git reflog 

Find the SHA hash for the commit you want to get back 

git reset --hard 1e62 //sha hash id 

or 

git reset --hard HEAD@{2}

// Reflogs are only available locally. If someone clones your repo, they will not be able to see your reflog contents.

// If a branch id deleted (git branch -D branchName )
Commits aren't deleted even though the branch was. 

// more details 
git log --walk-reflogs 

// create a new branch and pull in the last commit by referencing the sha hash;
git branch aviary 28a7
or 
git branch aviary HEAD@{1}

//checkout new branch
git checkout aviary 

git log --oneline // shows the commit is back and on the new branch 















